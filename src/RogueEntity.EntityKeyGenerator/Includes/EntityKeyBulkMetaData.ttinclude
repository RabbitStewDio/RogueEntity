
<#+
    void GenerateBulkEntityKeyMetaData(string className)
    {
        if (string.IsNullOrEmpty(className))
        {
            throw new ArgumentException(nameof(className));
        }
#>
    public sealed class <#= className #>MetaData : IBulkDataStorageMetaData<<#= className #>>
    {
        public static readonly <#= className #>MetaData Instance = new <#= className #>MetaData();

        public int MaxAge => <#= className #>.MaxAge;
        public bool IsReferenceEntity(in <#= className #> targetItem) => targetItem.IsReference;
        
        public <#= className #> CreateReferenceKey(byte age, int entityId) => <#= className #>.FromReferencedItem(age, entityId);

        public bool TryCreateBulkKey(int id, int data, out <#= className #> key)
        {
            key = <#= className #>.BulkItemFactoryMethod(id).WithData(data);
            return true;
        }

        public bool TryDeconstructBulkKey(in <#= className #> id, out int entityId, out int payload)
        {
            if (id.IsReference)
            {
                entityId = default;
                payload = default;
                return false;
            }
            
            entityId = id.BulkItemId;
            payload = id.Data;
            return true;
        }

    }
<#+
    }
#>
