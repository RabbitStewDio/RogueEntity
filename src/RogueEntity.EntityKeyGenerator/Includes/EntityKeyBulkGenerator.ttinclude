<#@ assembly name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>

<#+
    void GenerateBulkEntityKey(string className)
    {
        if (string.IsNullOrEmpty(className))
        {
            throw new ArgumentException(nameof(className));
        }
#>
    [EntityKey]
    [EntityXmlSerialization]
    [EntityBinarySerialization]
    [EntityKeyMetaData(typeof(<#= className #>MetaData))]
    public readonly struct <#=className #> : IEquatable<<#=className #>>, IBulkDataStorageKey<<#=className #>>
    {
        public static readonly <#=className #> Empty = default;
        public static int MaxAge => 7;
        readonly uint data;

        <#=className #>(uint data)
        {
            this.data = data;
        }

        public bool IsEmpty => data == 0;

        public bool IsReference
        {
            get
            {
                var raw = data & 0x8000_0000;
                return raw == 0x8000_0000;
            }
        }

        public int Data
        {
            get
            {
                if (IsReference)
                {
                    return 0;
                }

                return (ushort)(data & 0xFFFF);
            }
        }

        public byte Age
        {
            get { return (byte)((data & 0x7000_0000) >> 28); }
        }

        public int Key
        {
            get { return (int)(data & 0xFFF_FFFF); }
        }

        public int BulkItemId
        {
            get
            {
                if (IsReference)
                {
                    return 0;
                }

                return (int)((data & 0x7FFF_0000) >> 16);
            }
        }

        public <#=className #> WithData(int newData)
        {
            if (IsReference)
            {
                throw new InvalidOperationException("Reference items cannot carry inline data.");
            }

            if (newData < 0 || newData > ushort.MaxValue)
            {
                throw new ArgumentOutOfRangeException(nameof(newData), newData, "The given data is not a valid ushort value.");
            }

            return FromBulkItem((short)BulkItemId, (ushort)newData);
        }

        public static <#=className #> FromReferencedItem(byte age, int key)
        {
            if (age > MaxAge) throw new ArgumentException();
            if (key < 0 || key > 0x0FFF_FFFF) throw new ArgumentException();

            var rawData = 0x8000_0000;
            rawData |= (uint)(age << 28);
            rawData |= (uint)(key);
            return new <#=className #>(rawData);
        }

        public static <#=className #> FromBulkItem(short itemId, ushort data)
        {
            if (itemId < 1)
            {
                throw new ArgumentOutOfRangeException(nameof(itemId), "should not be zero");
            }

            var rawData = 0u;
            rawData |= (uint)(itemId << 16);
            rawData |= data;
            return new <#=className #>(rawData);
        }

        public bool Equals(<#=className #> other)
        {
            return data == other.data;
        }

        public bool Equals(IEntityKey obj)
        {
            return obj is <#=className #> other && Equals(other);
        }

        public override bool Equals(object obj)
        {
            return obj is <#=className #> other && Equals(other);
        }

        public override int GetHashCode()
        {
            return (int)data;
        }

        public static bool operator ==(<#=className #> left, <#=className #> right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(<#=className #> left, <#=className #> right)
        {
            return !left.Equals(right);
        }

        public override string ToString()
        {
            if (IsReference)
            {
                return $"<#=className #>[Ref]{Age:X2}[{Key:X8}]";
            }

            return $"<#=className #>[Bulk]{BulkItemId:X4}[{Data:X4}]";
        }

        public static <#=className #> BulkItemFactoryMethod(int declarationIndex)
        {
            if (declarationIndex < 1 || declarationIndex > short.MaxValue)
            {
                throw new ArgumentOutOfRangeException(nameof(declarationIndex), declarationIndex, "should be between 0 and 65,535");
            }

            return FromBulkItem((short)declarationIndex, 0);
        }
    }


<#+
    }
#>
